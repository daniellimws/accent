from __future__ import print_function
from unicorn import *
from unicorn.x86_const import *
from pwn import *
import struct

code = "85,-119,-27,83,-127,-20,36,1,0,0,-58,-123,0,-1,-1,-1,47,-58,-123,1,-1,-1,-1,122,-58,-123,2,-1,-1,-1,108,-58,-123,3,-1,-1,-1,49,-58,-123,4,-1,-1,-1,61,-58,-123,5,-1,-1,-1,64,-58,-123,6,-1,-1,-1,91,-58,-123,7,-1,-1,-1,61,-58,-123,8,-1,-1,-1,20,-58,-123,9,-1,-1,-1,88,-58,-123,10,-1,-1,-1,49,-58,-123,11,-1,-1,-1,58,-58,-123,12,-1,-1,-1,65,-58,-123,13,-1,-1,-1,127,-58,-123,14,-1,-1,-1,37,-58,-123,15,-1,-1,-1,89,-58,-123,16,-1,-1,-1,51,-58,-123,17,-1,-1,-1,36,-58,-123,18,-1,-1,-1,110,-58,-123,19,-1,-1,-1,50,-58,-123,20,-1,-1,-1,51,-58,-123,21,-1,-1,-1,71,-58,-123,22,-1,-1,-1,120,-58,-123,23,-1,-1,-1,89,-58,-123,24,-1,-1,-1,60,-58,-123,25,-1,-1,-1,52,-58,-123,26,-1,-1,-1,57,-58,-123,27,-1,-1,-1,118,-58,-123,28,-1,-1,-1,32,-58,-123,29,-1,-1,-1,109,-58,-123,30,-1,-1,-1,61,-58,-123,31,-1,-1,-1,114,-125,125,12,32,116,10,-72,0,0,0,0,-23,-51,1,0,0,-57,69,-12,1,0,0,0,-21,23,-117,69,-12,-115,20,0,-117,69,-12,-125,-24,1,-120,-108,5,-32,-2,-1,-1,-125,69,-12,1,-125,125,-12,32,126,-29,-115,-123,-32,-2,-1,-1,-119,-123,32,-1,-1,-1,-117,-123,32,-1,-1,-1,-13,15,111,0,102,15,111,-56,-117,69,8,-119,-123,36,-1,-1,-1,-117,-123,36,-1,-1,-1,-13,15,111,0,15,41,-123,56,-1,-1,-1,15,41,-115,40,-1,-1,-1,102,15,111,-115,56,-1,-1,-1,102,15,111,-123,40,-1,-1,-1,102,15,-17,-63,15,41,69,-56,-115,-123,-32,-2,-1,-1,-125,-64,16,-119,-123,80,-1,-1,-1,-117,-123,80,-1,-1,-1,-13,15,111,0,102,15,111,-56,-117,69,8,-125,-64,16,-119,-123,84,-1,-1,-1,-117,-123,84,-1,-1,-1,-13,15,111,0,15,41,-123,104,-1,-1,-1,15,41,-115,88,-1,-1,-1,102,15,111,-115,104,-1,-1,-1,102,15,111,-123,88,-1,-1,-1,102,15,-17,-63,15,41,69,-72,-117,69,8,-119,69,-108,102,15,111,69,-56,15,41,-123,120,-1,-1,-1,102,15,111,-123,120,-1,-1,-1,-117,69,-108,15,17,0,-117,69,8,-125,-64,16,-119,69,-76,102,15,111,69,-72,15,41,69,-104,102,15,111,69,-104,-117,69,-76,15,17,0,-57,69,-16,0,0,0,0,-21,46,-117,69,-16,-115,80,1,-117,69,8,1,-48,15,-74,24,-117,85,-16,-117,69,8,1,-48,15,-74,8,-117,69,-16,-115,80,1,-117,69,8,1,-48,49,-53,-119,-38,-120,16,-125,69,-16,1,-117,69,12,-115,80,-1,-117,69,-16,57,-62,119,-59,-117,69,12,-125,-24,2,-119,69,-20,-21,43,-117,85,-20,-117,69,8,1,-48,15,-74,24,-117,69,-20,-115,80,1,-117,69,8,1,-48,15,-74,8,-117,85,-20,-117,69,8,1,-48,49,-53,-119,-38,-120,16,-125,109,-20,1,-125,125,-20,0,121,-49,-58,69,-21,1,-57,69,-28,0,0,0,0,-21,37,-117,85,-28,-117,69,8,1,-48,15,-74,16,-115,-115,0,-1,-1,-1,-117,69,-28,1,-56,15,-74,0,56,-62,116,4,-58,69,-21,0,-125,69,-28,1,-117,69,-28,57,69,12,119,-45,15,-74,69,-21,-127,-60,36,1,0,0,91,93".split(",")

def find_flag(flag, block):
    flag = list(flag)

    for k in range(31):
        flag[k] ^= flag[k + 1]

    for k in range(31):
        flag[30 - k + 1] ^= flag[30 - k]

    print(flag)

    for i in range(32):
        flag[i] ^= (i + 1) * 2

    print(''.join(map(chr, flag)))


# memory address where emulation starts
ADDRESS = 0x8040000

# callback for tracing instructions
def hook_code(uc, address, size, user_data):
    if address == ADDRESS + 0x2C7:
        flag_addr = mu.reg_read(UC_X86_REG_EBP) - 0x100
        print(">>> Dumping flag from " + hex(flag_addr))
        flag = mu.mem_read(flag_addr, 0x20)
        print(list(flag))
        
        block_addr = mu.reg_read(UC_X86_REG_EBP) - 0x110
        block = mu.mem_read(block_addr, 0x10)
        print(list(block))

        find_flag(flag, block)
        # print(list(flag))

        our_flag_addr = u32(mu.mem_read(mu.reg_read(UC_X86_REG_EBP) + 0x8, 4))
        print(">>> Dumping our flag from " + hex(our_flag_addr))
        our_flag = mu.mem_read(our_flag_addr, 0x20)
        print(list(our_flag))

X86_CODE32 = ''.join(map(chr, map(lambda x: int(x) % 256, code)))

try:
    mu = Uc(UC_ARCH_X86, UC_MODE_32)
    mu.mem_map(ADDRESS, 0x400 * 0x400)
    mu.mem_write(ADDRESS, X86_CODE32)
    mu.mem_write(0x8040000 + 0x1000, ''.join(map(chr, [79, 43, 49, 75, 12, 114, 72, 53, 105, 37, 53, 24, 3, 93, 120, 68, 29, 115, 61, 17, 3, 38, 64, 66, 5, 122, 53, 79, 79, 107, 38, 42])))
    mu.mem_write(0x8040000 + 0x5000 + 0x4, p32(0x8040000 + 0x1000))
    mu.mem_write(0x8040000 + 0x5000 + 0x8, p32(0x20))
    mu.reg_write(UC_X86_REG_ESP, 0x8040000 + 0x5000)    
    mu.hook_add(UC_HOOK_CODE, hook_code)
    mu.emu_start(ADDRESS, ADDRESS + len(X86_CODE32))  

    print(mu.reg_read(UC_X86_REG_EAX))  

except UcError as e:
    print("ERROR: %s" % e)